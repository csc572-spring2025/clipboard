[
  {
    "type": "Plaintext",
    "content": "clear_button = msg.addButton(\"Clear\", QMessageBox.ActionRole)",
    "time": "02:32 PM",
    "timestamp": "2025-05-23T14:32:34.841141",
    "chars": "61 characters"
  },
  {
    "type": "Plaintext",
    "content": "        msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel) # Optional: Add buttons\n",
    "time": "02:31 PM",
    "timestamp": "2025-05-23T14:31:54.585633",
    "chars": "92 characters"
  },
  {
    "type": "Plaintext",
    "content": "self.button = QPushButton(\"Show Popup\", self)\n        self.button.move(100, 80)\n        self.button.clicked.connect(self.show_popup)",
    "time": "02:26 PM",
    "timestamp": "2025-05-23T14:26:09.354659",
    "chars": "132 characters"
  },
  {
    "type": "Code",
    "content": "def show_popup(self):\n        msg = QMessageBox()\n        msg.setWindowTitle(\"Popup Title\")\n        msg.setText(\"This is the main text of the popup!\")\n        msg.setIcon(QMessageBox.Information) # Optional: Set icon\n        msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel) # Optional: Add buttons\n\n        # Additional options (optional):\n        msg.setInformativeText(\"More details can be added here.\")\n        msg.setDetailedText(\"Detailed information if needed.\")\n\n        result = msg.exec_() # Show the popup and get the user's choice\n\n        if result == QMessageBox.Ok:\n            print(\"User clicked OK\")\n        elif result == QMessageBox.Cancel:\n            print(\"User clicked Cancel\")",
    "time": "02:24 PM",
    "timestamp": "2025-05-23T14:24:21.342862",
    "chars": "711 characters"
  },
  {
    "type": "Plaintext",
    "content": "",
    "time": "02:01 PM",
    "timestamp": "2025-05-23T14:01:45.688968",
    "chars": "0 characters"
  },
  {
    "type": "Quotes",
    "content": "\"That's what she said\"",
    "time": "10:09 AM",
    "timestamp": "2025-05-22T10:09:39.579169",
    "chars": "22 characters"
  },
  {
    "type": "Quotes",
    "content": "\"hello\"",
    "time": "10:09 AM",
    "timestamp": "2025-05-22T10:09:27.857011",
    "chars": "7 characters"
  },
  {
    "type": "Plaintext",
    "content": "may",
    "time": "10:02 AM",
    "timestamp": "2025-05-22T10:02:54.602572",
    "chars": "3 characters"
  },
  {
    "type": "Plaintext",
    "content": "#dedede",
    "time": "08:48 PM",
    "timestamp": "2025-05-21T20:48:09.868486",
    "chars": "7 characters"
  },
  {
    "type": "Code",
    "content": "\nQScrollBar::handle:horizontal:hover {\n    background: #888;  /* lighter on hover */\n    border: 1px solid #aaa;\n}",
    "time": "08:45 PM",
    "timestamp": "2025-05-21T20:45:16.160157",
    "chars": "114 characters"
  },
  {
    "type": "Code",
    "content": "            QScrollBar::handle:horizontal {\n                border: 1px outset gray;\n            }\n            QScrollBar::handle:horizonal:hover {\n                background-color: white;\n            }",
    "time": "08:44 PM",
    "timestamp": "2025-05-21T20:44:22.747266",
    "chars": "202 characters"
  },
  {
    "type": "Code",
    "content": "QScrollBar::handle:vertical {\n                border: 1px outset gray;\n            }\n            QScrollBar::handle:vertical:hover {\n                background-color: white;\n            }",
    "time": "08:43 PM",
    "timestamp": "2025-05-21T20:43:56.771537",
    "chars": "187 characters"
  },
  {
    "type": "Plaintext",
    "content": "ScrollBar::handle:vertical",
    "time": "08:42 PM",
    "timestamp": "2025-05-21T20:42:37.695839",
    "chars": "26 characters"
  },
  {
    "type": "Plaintext",
    "content": "                border: 1px outset red;\n",
    "time": "08:42 PM",
    "timestamp": "2025-05-21T20:42:08.253967",
    "chars": "40 characters"
  },
  {
    "type": "Code",
    "content": "QScrollBar::handle:vertical:hover {\n    /* your hover styles here */\n}",
    "time": "08:37 PM",
    "timestamp": "2025-05-21T20:37:13.756951",
    "chars": "70 characters"
  },
  {
    "type": "Code",
    "content": "import sys\nimport os\nimport json\nimport time\nimport threading\nfrom PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, \n                            QHBoxLayout, QPushButton, QLabel, QListWidget, \n                            QLineEdit, QTabWidget, QScrollArea, QFrame,\n                            QSystemTrayIcon, QMenu, QAction)\nfrom PyQt5.QtCore import Qt, QSize, pyqtSignal, QObject\nfrom PyQt5.QtGui import QIcon, QFont\nimport pyperclip\nimport datetime\n\nclass ClipboardSignals(QObject):\n    new_clipboard_content = pyqtSignal(dict)\n\nclass ClipboardManager(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Clipboard\")\n        self.setMinimumSize(800, 600)\n        self.setStyleSheet(\"background-color: #1e1e1e; color: white;\")\n        \n        self.clipboard_items = []\n        self.data_file = \"clipboard_data.json\"\n        self.load_clipboard_data()\n        \n        self.signals = ClipboardSignals()\n        self.signals.new_clipboard_content.connect(self.add_clipboard_item)\n        \n        # main page\n        main_widget = QWidget()\n        self.setCentralWidget(main_widget)\n        main_layout = QHBoxLayout(main_widget)\n        \n        # sidebar\n        sidebar = QWidget()\n        sidebar.setMaximumWidth(270)\n        sidebar_layout = QVBoxLayout(sidebar)\n        title_label = QLabel(\"Clipboard\")\n        title_label.setFont(QFont(\"Arial\", 24, QFont.Bold))\n        sidebar_layout.addWidget(title_label)\n        \n        # buttons\n        self.all_btn = self.create_sidebar_button(\"All\", \"‚â°\")\n        self.code_btn = self.create_sidebar_button(\"Code\", \"‚å®\")\n        self.latex_btn = self.create_sidebar_button(\"LaTeX\", \"ùêÑ\")\n        self.quotes_btn = self.create_sidebar_button(\"Quotes\", \"‚ùù\")\n        self.plaintext_btn = self.create_sidebar_button(\"Plaintext\", \"‚â°\")\n\n        # turns mouse into a pointer\n        self.all_btn.setCursor(Qt.PointingHandCursor)\n        self.code_btn.setCursor(Qt.PointingHandCursor)\n        self.latex_btn.setCursor(Qt.PointingHandCursor)\n        self.quotes_btn.setCursor(Qt.PointingHandCursor)\n        self.plaintext_btn.setCursor(Qt.PointingHandCursor)\n        \n        # filter buttons\n        self.all_btn.clicked.connect(lambda: self.filter_items(\"All\"))\n        self.code_btn.clicked.connect(lambda: self.filter_items(\"Code\"))\n        self.latex_btn.clicked.connect(lambda: self.filter_items(\"LaTeX\"))\n        self.quotes_btn.clicked.connect(lambda: self.filter_items(\"Quotes\"))\n        self.plaintext_btn.clicked.connect(lambda: self.filter_items(\"Plaintext\"))\n        \n        sidebar_layout.addWidget(self.all_btn)\n        sidebar_layout.addWidget(self.code_btn)\n        sidebar_layout.addWidget(self.latex_btn)\n        sidebar_layout.addWidget(self.quotes_btn)\n        sidebar_layout.addWidget(self.plaintext_btn)\n        \n        length_label = QLabel(\"Length\")\n        sidebar_layout.addWidget(length_label)\n        slider_frame = QFrame()\n        slider_frame.setFrameShape(QFrame.StyledPanel)\n        slider_frame.setMinimumHeight(30)\n        sidebar_layout.addWidget(slider_frame)\n        sidebar_layout.addStretch()\n        content_area = QWidget()\n        content_layout = QVBoxLayout(content_area)\n        \n        # search bar\n        search_layout = QHBoxLayout()\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Search\")\n        self.search_bar.setStyleSheet(\"\"\"\n            QLineEdit {\n                background-color: #333;\n                border-radius: 5px;\n                padding: 8px;\n                font-size: 16px;\n            }\n        \"\"\")\n        self.search_bar.textChanged.connect(self.search_items)\n        search_layout.addWidget(self.search_bar)\n        \n        # settings \n        settings_btn = QPushButton(\"‚öô\")\n        settings_btn.setFixedSize(40, 40)\n        settings_btn.setStyleSheet(\"background-color: transparent; font-size: 20px;\")\n        search_layout.addWidget(settings_btn)\n        \n        content_layout.addLayout(search_layout)\n        \n        # clipboard items area\n        scroll_area = QScrollArea()\n        scroll_area.setWidgetResizable(True)\n        scroll_area.setStyleSheet(\"\"\"\n            QScrollArea {\n                border: none;\n            }\n            \"\"\")\n        scroll_area.setCursor(Qt.PointingHandCursor)\n        self.items_widget = QWidget()\n        self.items_layout = QVBoxLayout(self.items_widget)\n        self.items_layout.addStretch()\n        \n        scroll_area.setWidget(self.items_widget)\n        content_layout.addWidget(scroll_area)\n        \n        main_layout.addWidget(sidebar)\n        main_layout.addWidget(content_area)\n        \n        self.setup_system_tray()\n        self.display_clipboard_items()\n        \n        # start clipboard monitoring in a separate thread\n        self.monitoring_active = True\n        self.monitor_thread = threading.Thread(target=self.monitor_clipboard)\n        self.monitor_thread.daemon = True\n        self.monitor_thread.start()\n    \n    def create_sidebar_button(self, text, icon_text):\n        btn = QPushButton(f\" {text}\")\n        btn.setIcon(QIcon())  \n        btn.setIconSize(QSize(24, 24))\n        btn.setStyleSheet(\"\"\"\n            QPushButton {\n                text-align: left;\n                padding: 10px;\n                font-size: 16px;\n                background-color: transparent;\n                border: none;\n            }\n            QPushButton:hover {\n                background-color: #333;\n            }\n        \"\"\")\n        return btn\n    \n    def create_clipboard_item(self, item):\n        frame = QFrame()\n        frame.setFrameShape(QFrame.StyledPanel)\n        frame.setStyleSheet(\"\"\"\n            QFrame {\n                background-color: #2d2d2d;\n                border-radius: 8px;\n                margin: 5px 0;\n                padding: 10px;\n            }\n        \"\"\")\n        \n        layout = QVBoxLayout(frame)\n        \n        # content and copy button\n        top_layout = QHBoxLayout()\n        \n        # icon based on type\n        icon_label = QLabel()\n        if item[\"type\"] == \"Code\":\n            icon_label.setText(\"‚å®\")\n        elif item[\"type\"] == \"LaTeX\":\n            icon_label.setText(\"ùêÑ\")\n        elif item[\"type\"] == \"Quotes\":\n            icon_label.setText(\"‚ùù\")\n        else:\n            icon_label.setText(\"‚â°\")\n        \n        icon_label.setStyleSheet(\"font-size: 24px; color: #888;\")\n        top_layout.addWidget(icon_label)\n        \n        content_label = QLabel(item[\"content\"])\n        content_label.setStyleSheet(\"font-size: 16px;\")\n        content_label.setWordWrap(True)\n        top_layout.addWidget(content_label, 1)\n        \n        copy_btn = QPushButton(\"Copy\")\n        copy_btn.setStyleSheet(\"\"\"\n            QPushButton {\n                background-color: transparent;\n                color: white;\n                border: none;\n                font-size: 16px;\n            }\n        \"\"\")\n\n        copy_btn.setCursor(Qt.PointingHandCursor)\n        copy_btn.clicked.connect(lambda: pyperclip.copy(item[\"content\"]))\n        top_layout.addWidget(copy_btn)\n        \n        layout.addLayout(top_layout)\n        \n        # type and time info\n        info_layout = QHBoxLayout()\n        type_label = QLabel(item[\"type\"])\n        type_label.setStyleSheet(\"color: #888;\")\n        time_label = QLabel(item[\"time\"])\n        time_label.setStyleSheet(\"color: #888;\")\n        chars_label = QLabel(item[\"chars\"])\n        chars_label.setStyleSheet(\"color: #888;\")\n        \n        info_layout.addWidget(type_label)\n        info_layout.addWidget(time_label)\n        info_layout.addStretch()\n        info_layout.addWidget(chars_label)\n        \n        layout.addLayout(info_layout)\n        \n        return frame\n    \n    def setup_system_tray(self):\n        self.tray_icon = QSystemTrayIcon(self)\n        self.tray_icon.setIcon(QIcon.fromTheme(\"edit-copy\"))  \n        \n        tray_menu = QMenu()\n        \n        show_action = QAction(\"Show\", self)\n        show_action.triggered.connect(self.show)\n        \n        hide_action = QAction(\"Hide\", self)\n        hide_action.triggered.connect(self.hide)\n        \n        quit_action = QAction(\"Quit\", self)\n        quit_action.triggered.connect(self.quit_application)\n        \n        tray_menu.addAction(show_action)\n        tray_menu.addAction(hide_action)\n        tray_menu.addSeparator()\n        tray_menu.addAction(quit_action)\n        \n\n        self.tray_icon.setContextMenu(tray_menu)\n        self.tray_icon.show()\n        self.tray_icon.activated.connect(self.tray_icon_activated)\n    \n    def tray_icon_activated(self, reason):\n        if reason == QSystemTrayIcon.DoubleClick:\n            if self.isVisible():\n                self.hide()\n            else:\n                self.show()\n                self.activateWindow()\n    \n    def closeEvent(self, event):\n        event.ignore()\n        self.hide()\n    \n    def quit_application(self):\n        # save data before quitting\n        self.save_clipboard_data()\n        self.monitoring_active = False\n        QApplication.quit()\n    \n    def monitor_clipboard(self):\n        if not os.path.exists(\"clipboard_logs\"):\n            os.makedirs(\"clipboard_logs\")\n        \n        previous_content = pyperclip.paste()\n        seen_entries = {previous_content}\n        \n        while self.monitoring_active:\n            try:\n                current_content = pyperclip.paste()\n                \n                if current_content != previous_content and current_content not in seen_entries:\n                    timestamp = datetime.datetime.now()\n                    formatted_time = timestamp.strftime(\"%I:%M %p\")\n                    \n\n                    content_type = self.categorize_content(current_content)\n                    \n                    item = {\n                        \"type\": content_type,\n                        \"content\": current_content,\n                        \"time\": formatted_time,\n                        \"timestamp\": timestamp.isoformat(),\n                        \"chars\": f\"{len(current_content)} characters\"\n                    }\n                    \n\n                    self.signals.new_clipboard_content.emit(item)\n                    \n\n                    previous_content = current_content\n                    seen_entries.add(current_content)\n                \n                time.sleep(0.5)\n                \n            except Exception as e:\n                print(f\"Error in clipboard monitoring: {e}\")\n                time.sleep(1)\n    \n    def categorize_content(self, content):\n        # super simple categorization that doesn't really work but can be updated\n        content = content.strip()\n        \n        # Check for code\n        code_indicators = [\"def \", \"function\", \"class \", \"{\", \"};\", \"import \", \"from \", \"public \", \"private \", \"#include\"]\n        for indicator in code_indicators:\n            if indicator in content:\n                return \"Code\"\n        \n        # Check for LaTeX\n        latex_indicators = [\"\\\\begin{\", \"\\\\end{\", \"\\\\frac\", \"\\\\sum\", \"\\\\int\", \"\\\\lim\", \"\\\\mathbb\"]\n        for indicator in latex_indicators:\n            if indicator in content:\n                return \"LaTeX\"\n        \n        # Check for quotes\n        if (content.startswith('\"') and content.endswith('\"')) or (content.startswith(\"'\") and content.endswith(\"'\")):\n            return \"Quotes\"\n        \n        # Default to plaintext\n        return \"Plaintext\"\n    \n    def add_clipboard_item(self, item):\n        self.clipboard_items.insert(0, item)\n        self.save_clipboard_data()\n        item_widget = self.create_clipboard_item(item)\n        self.items_layout.insertWidget(0, item_widget)\n    \n    def display_clipboard_items(self):\n        while self.items_layout.count() > 1: \n            item = self.items_layout.takeAt(0)\n            if item.widget():\n                item.widget().deleteLater()\n        for item in self.clipboard_items:\n            item_widget = self.create_clipboard_item(item)\n            self.items_layout.insertWidget(0, item_widget)\n    \n    def filter_items(self, filter_type):\n        while self.items_layout.count() > 1: \n            item = self.items_layout.takeAt(0)\n            if item.widget():\n                item.widget().deleteLater()\n        for item in self.clipboard_items:\n            if filter_type == \"All\" or item[\"type\"] == filter_type:\n                item_widget = self.create_clipboard_item(item)\n                self.items_layout.insertWidget(0, item_widget)\n    \n    def search_items(self):\n        search_text = self.search_bar.text().lower()\n        \n        while self.items_layout.count() > 1: \n            item = self.items_layout.takeAt(0)\n            if item.widget():\n                item.widget().deleteLater()\n        for item in self.clipboard_items:\n            if search_text in item[\"content\"].lower():\n                item_widget = self.create_clipboard_item(item)\n                self.items_layout.insertWidget(0, item_widget)\n    \n    def load_clipboard_data(self):\n        try:\n            if os.path.exists(self.data_file):\n                with open(self.data_file, 'r', encoding='utf-8') as f:\n                    self.clipboard_items = json.load(f)\n            else:\n                self.clipboard_items = []\n        except Exception as e:\n            print(f\"Error loading clipboard data: {e}\")\n            self.clipboard_items = []\n    \n    def save_clipboard_data(self):\n        try:\n            with open(self.data_file, 'w', encoding='utf-8') as f:\n                json.dump(self.clipboard_items, f, ensure_ascii=False, indent=2)\n        except Exception as e:\n            print(f\"Error saving clipboard data: {e}\")\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = ClipboardManager()\n    window.show()\n    sys.exit(app.exec_())",
    "time": "08:33 PM",
    "timestamp": "2025-05-21T20:33:24.487084",
    "chars": "13790 characters"
  },
  {
    "type": "Plaintext",
    "content": "        # clipboard items area\n        scroll_area = QScrollArea()\n        scroll_area.setWidgetResizable(True)\n        scroll_area.setStyleSheet(\"border: none;\")\n        scroll_area.setCursor(Qt.PointingHandCursor)\n        self.items_widget = QWidget()\n        self.items_layout = QVBoxLayout(self.items_widget)\n        self.items_layout.addStretch()\n        \n        scroll_area.setWidget(self.items_widget)",
    "time": "08:23 PM",
    "timestamp": "2025-05-21T20:23:17.764206",
    "chars": "409 characters"
  },
  {
    "type": "Plaintext",
    "content": "# clipboard items area\n        scroll_area = QScrollArea()\n        scroll_area.setWidgetResizable(True)\n        scroll_area.setStyleSheet(\"border: none;\")\n        scroll_area.setCursor(Qt.PointingHandCursor)\n        self.items_widget = QWidget()\n        self.items_layout = QVBoxLayout(self.items_widget)\n        self.items_layout.addStretch()",
    "time": "08:23 PM",
    "timestamp": "2025-05-21T20:23:12.973270",
    "chars": "343 characters"
  },
  {
    "type": "Plaintext",
    "content": "setCursor(Qt.PointingHandCursor)",
    "time": "08:21 PM",
    "timestamp": "2025-05-21T20:21:30.288197",
    "chars": "32 characters"
  },
  {
    "type": "Plaintext",
    "content": "Yea it‚Äôs due at 3",
    "time": "08:14 PM",
    "timestamp": "2025-05-21T20:14:27.950234",
    "chars": "17 characters"
  },
  {
    "type": "Plaintext",
    "content": "https://github.com/csc572-spring2025/spotify-analyzer",
    "time": "08:13 PM",
    "timestamp": "2025-05-21T20:13:47.521250",
    "chars": "53 characters"
  },
  {
    "type": "Code",
    "content": "        # search bar\n        search_layout = QHBoxLayout()\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Search\")\n        self.search_bar.setStyleSheet(\"\"\"\n            QLineEdit {\n                background-color: #333;\n                border-radius: 5px;\n                padding: 8px;\n                font-size: 16px;\n            }\n        \"\"\")",
    "time": "08:12 PM",
    "timestamp": "2025-05-21T20:12:14.850868",
    "chars": "381 characters"
  },
  {
    "type": "Plaintext",
    "content": "self.all_btn = self.create_sidebar_button(\"All\", \"‚â°\")\n        self.code_btn = self.create_sidebar_button(\"Code\", \"‚å®\")\n        self.latex_btn = self.create_sidebar_button(\"LaTeX\", \"ùêÑ\")\n        self.quotes_btn = self.create_sidebar_button(\"Quotes\", \"‚ùù\")\n        self.plaintext_btn = self.create_sidebar_button(\"Plaintext\", \"‚â°\")",
    "time": "08:09 PM",
    "timestamp": "2025-05-21T20:09:53.031276",
    "chars": "325 characters"
  },
  {
    "type": "Plaintext",
    "content": "setCursor(Qt.PointingHandCursor)",
    "time": "08:08 PM",
    "timestamp": "2025-05-21T20:08:52.155647",
    "chars": "32 characters"
  },
  {
    "type": "Plaintext",
    "content": "button.setCursor(Qt.PointingHandCursor)\n",
    "time": "08:08 PM",
    "timestamp": "2025-05-21T20:08:20.817664",
    "chars": "40 characters"
  },
  {
    "type": "Code",
    "content": "   QPushButton {\n                background-color: transparent;\n                color: white;\n                border: none;\n                font-size: 16px;\n            }\n            QPushButton:hover {\n                cursor: pointer;\n            }",
    "time": "08:07 PM",
    "timestamp": "2025-05-21T20:07:19.058552",
    "chars": "249 characters"
  },
  {
    "type": "Code",
    "content": "Implemented search functionality to find items by content",
    "time": "08:07 PM",
    "timestamp": "2025-05-21T20:07:05.720846",
    "chars": "57 characters"
  },
  {
    "type": "Plaintext",
    "content": "QPushButton",
    "time": "08:06 PM",
    "timestamp": "2025-05-21T20:06:31.445163",
    "chars": "11 characters"
  },
  {
    "type": "Code",
    "content": "Implemented search functionality to find items by content",
    "time": "08:04 PM",
    "timestamp": "2025-05-21T20:04:09.101374",
    "chars": "57 characters"
  },
  {
    "type": "Plaintext",
    "content": "                cursor: pointer;\n",
    "time": "12:56 PM",
    "timestamp": "2025-05-21T12:56:28.184399",
    "chars": "33 characters"
  },
  {
    "type": "Code",
    "content": "ss ClipboardManager(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Clipboard\")\n        self.setMinimumSize(800, 600)\n        self.setStyleSheet(\"background-color: #1e1e1e; color: white;\")",
    "time": "12:54 PM",
    "timestamp": "2025-05-21T12:54:25.115023",
    "chars": "234 characters"
  },
  {
    "type": "Code",
    "content": "Implemented search functionality to find items by content",
    "time": "12:53 PM",
    "timestamp": "2025-05-21T12:53:47.063745",
    "chars": "57 characters"
  },
  {
    "type": "Plaintext",
    "content": "                cursor: pointer:\n",
    "time": "12:53 PM",
    "timestamp": "2025-05-21T12:53:09.564582",
    "chars": "33 characters"
  },
  {
    "type": "Code",
    "content": "ss ClipboardManager(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Clipboard\")\n        self.setMinimumSize(800, 600)\n        self.setStyleSheet(\"background-color: #1e1e1e; color: white;\")",
    "time": "12:51 PM",
    "timestamp": "2025-05-21T12:51:29.835690",
    "chars": "234 characters"
  },
  {
    "type": "Code",
    "content": "Implemented search functionality to find items by content",
    "time": "12:51 PM",
    "timestamp": "2025-05-21T12:51:26.098014",
    "chars": "57 characters"
  },
  {
    "type": "Code",
    "content": "Implemented search functionality to find items by content",
    "time": "12:43 PM",
    "timestamp": "2025-05-21T12:43:56.517323",
    "chars": "57 characters"
  },
  {
    "type": "Code",
    "content": "ss ClipboardManager(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Clipboard\")\n        self.setMinimumSize(800, 600)\n        self.setStyleSheet(\"background-color: #1e1e1e; color: white;\")",
    "time": "12:43 PM",
    "timestamp": "2025-05-21T12:43:51.716650",
    "chars": "234 characters"
  },
  {
    "type": "Plaintext",
    "content": "ff0000",
    "time": "12:43 PM",
    "timestamp": "2025-05-21T12:43:26.332987",
    "chars": "6 characters"
  },
  {
    "type": "Plaintext",
    "content": "A package addressed to you has been received at Central Services.  Please \nreview the following message for further instructions prior to contacting or coming \nto Central Services:",
    "time": "12:40 PM",
    "timestamp": "2025-05-21T12:40:01.972277",
    "chars": "180 characters"
  },
  {
    "type": "Plaintext",
    "content": "‚ÄúThat‚Äôs what she said‚Äù\n",
    "time": "12:39 PM",
    "timestamp": "2025-05-21T12:39:55.066577",
    "chars": "23 characters"
  },
  {
    "type": "Plaintext",
    "content": "may",
    "time": "12:39 PM",
    "timestamp": "2025-05-21T12:39:49.731835",
    "chars": "3 characters"
  },
  {
    "type": "Plaintext",
    "content": "",
    "time": "11:57 AM",
    "timestamp": "2025-05-21T11:57:40.849259",
    "chars": "0 characters"
  },
  {
    "type": "Plaintext",
    "content": "A package addressed to you has been received at Central Services.  Please \nreview the following message for further instructions prior to contacting or coming \nto Central Services:",
    "time": "11:52 AM",
    "timestamp": "2025-05-21T11:52:32.710527",
    "chars": "180 characters"
  },
  {
    "type": "Plaintext",
    "content": "x =(63.164 - 87.405)-059.567242+77.100236 = ",
    "time": "11:52 AM",
    "timestamp": "2025-05-21T11:52:09.276405",
    "chars": "44 characters"
  },
  {
    "type": "Plaintext",
    "content": "‚ÄúThat‚Äôs what she said‚Äù\n",
    "time": "11:51 AM",
    "timestamp": "2025-05-21T11:51:26.671390",
    "chars": "23 characters"
  },
  {
    "type": "Code",
    "content": "ss ClipboardManager(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Clipboard\")\n        self.setMinimumSize(800, 600)\n        self.setStyleSheet(\"background-color: #1e1e1e; color: white;\")",
    "time": "11:51 AM",
    "timestamp": "2025-05-21T11:51:02.503977",
    "chars": "234 characters"
  },
  {
    "type": "Plaintext",
    "content": "may",
    "time": "11:50 AM",
    "timestamp": "2025-05-21T11:50:55.063550",
    "chars": "3 characters"
  },
  {
    "type": "Code",
    "content": "Implemented search functionality to find items by content",
    "time": "11:50 AM",
    "timestamp": "2025-05-21T11:50:51.861221",
    "chars": "57 characters"
  },
  {
    "type": "Code",
    "content": "Implemented search functionality to find items by content",
    "time": "12:48 PM",
    "timestamp": "2025-05-16T12:48:27.088091",
    "chars": "57 characters"
  }
]
